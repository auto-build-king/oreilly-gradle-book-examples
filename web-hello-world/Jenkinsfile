pipeline {
    agent any
	
	environment {
        EMAIL_RECIPIENTS = 'auto.build.king@gmail.com'
    }
	
    triggers {
        pollSCM('*/5 * * * *')
    }

    stages {
		stage('Stage_1_Build') {
            steps {
                dir('web-hello-world') {
					script {
					   if (isUnix()) {
							sh 'echo running on Linux'
							sh './gradlew clean test'
						} else {
							bat 'echo running on Windows'
							bat "./gradlew.bat clean test"
						}
					}
				}
            }
            post {
                always {
					dir("web-hello-world") {
						junit '**/build/test-results/test/TEST-*.xml'
					}
                }
            }
        }
		stage('Stage_2_WarFile') {
            steps {
                dir('web-hello-world') {
					script {
					   if (isUnix()) {
							sh 'echo running on Linux'
							sh './gradlew war'
						} else {
							bat 'echo running on Windows'
							bat "./gradlew.bat war"
						}
					}
				}
            }
		}
	}
	post {
		always {
            archiveArtifacts artifacts: 'web-hello-world/build/libs/*.war', fingerprint: true
        }
        failure {
            sendEmail("Failed");
        }
    }
}

def sendEmail(status) {
    mail(
		to: "$EMAIL_RECIPIENTS",
		subject: "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",
		body: "Changes:\n " + getChangeString() + "\n\n Check console output at: //$BUILD_URL/console" + "\n")
}
	